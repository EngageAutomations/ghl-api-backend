Hereâ€™s a full summary of what weâ€™ve learned and confirmed through working with Go HighLevelâ€™s web builder, specifically around embedding scripts, buttons, and handling dynamic page behavior for things like popup forms.

---

## ðŸ§¾ Go HighLevel Web Builder: Full Report

### âœ… **1. DOM Access & Script Injection**

* **Scripts placed in the footer (Tracking Code area)** will run successfully after the DOM loads.
* **DOM elements (e.g. `.ecomm-price-desktop-container`) can be reliably targeted** if you wait for `DOMContentLoaded` or use a `MutationObserver` to monitor dynamic loading.
* HighLevel pages are dynamically rendered, so content like product listings may not be present at page loadâ€”**requiring MutationObservers** for reliable JS injection.

### âœ… **2. Button Insertion Best Practices**

* Buttons added via `JavaScript` using `createElement()` must:

  * Use accurate selectors to find where to inject (e.g., `.ecomm-price-desktop-container` for product pages).
  * Avoid inserting the button more than once (use `document.querySelector(".trigger-optin-btn")` as a check).
* Use a real `<button>` element, not a `<div>`, for accessibility and expected behavior.

### âœ… **3. Styling Behavior**

* Go HighLevelâ€™s builder **does not provide a global `<head>` editor**, so:

  * Styles should be included **in the "Header Code" section** of the page settings.
  * Or inline styles can be injected via JavaScriptâ€”but this is discouraged for reusability and hover effects.

* CSS classes (like `.trigger-optin-btn`) need to be manually added to the header area. Otherwise, buttons will render unstyled.

### âœ… **4. Popups and Modal Windows**

* You can build **custom modal popups** using HTML + CSS + JS inside the builder.

* To trigger modals with query params or track slugs:

  * Use `window.location.pathname` to extract a listing slug.
  * Dynamically build iframe URLs with `URLSearchParams`.

* HighLevel doesnâ€™t sanitize or strip out inline event handlers like `onclick="..."`, so modal open/close buttons work reliably.

### âœ… **5. Responsiveness Considerations**

* You must handle responsiveness **manually** in your CSSâ€”especially when using fixed width/height or full-screen modals.
* CSS media queries are respected in Go HighLevel, so responsive behavior is achievable.

### âœ… **6. Iframes and Form Embeds**

* You can embed HighLevel forms in modals using iframe URLs (e.g. `https://app.makerexpress3d.com/widget/form/...`).

* If embedding dynamic URLs, remember to reset the iframe `src` when the modal closes to unload form sessions.

* You can **pass data to the form via URL parameters** like `?listing=product-name&utm_campaign=slug`.

### âœ… **7. UTM & Dynamic Data**

* Go HighLevel **does not automatically expose the listing slug or product info in the DOM**. You must extract it manually from the URL (e.g., `window.location.pathname`).
* Your scripts can append UTM parameters programmatically for analytics tracking.

### âœ… **8. Button Clipping Issues in Builder**

* Positioning buttons too close to the edge may result in clipping or overlapping.
* You can fix this by:

  * Avoiding absolute positioning unless you calculate space precisely.
  * Adding at least `100px` padding if needed around modals or iframe containers.

### âœ… **9. Common Pitfalls**

* Using incorrect selectors (e.g., `.hl-product-detail-product-price`) will silently fail and prevent button insertion.
* Forgetting to define styling for classes like `.trigger-optin-btn` results in a button that renders with no visible styling.
* Not clearing iframe `src` when closing popups can lead to memory or UI issues.

---

## âœ… Best Practice Template

### âœ… Style (Header Code):

```html
<style>
  .trigger-optin-btn {
    background-color: #3b82f6;
    color: #ffffff;
    padding: 12px 20px;
    border-radius: 26px;
    font-weight: bold;
    font-size: 16px;
    cursor: pointer;
    display: inline-block;
    margin-top: 20px;
    text-align: center;
    border: none;
    transition: all 0.2s ease;
    text-decoration: none;
  }

  .trigger-optin-btn:hover {
    opacity: 0.9;
    transform: translateY(-1px);
  }
</style>
```

### âœ… Script + Modal (Footer Code):

```html
<!-- Popup Backdrop and Container -->
<div id="customOptinBackdrop" onclick="closeOptinPopup()"></div>
<div id="customOptinForm">
  <span class="close-btn" onclick="closeOptinPopup()">Ã—</span>
  <div id="popupIframeContainer">
    <iframe
      id="popupFormFrame"
      src=""
      style="width: 100%; height: 340px; border: none; border-radius: 6px; overflow: hidden;"
      scrolling="no"
      allowfullscreen
    ></iframe>
  </div>
</div>

<script>
  function getSlugFromUrl() {
    const parts = window.location.pathname.split('/');
    return parts[parts.length - 1] || "unknown";
  }

  function openOptinPopup() {
    const slug = getSlugFromUrl();
    const url = new URL("https://app.makerexpress3d.com/widget/form/YOUR_FORM_ID");
    url.searchParams.set('listing', slug);
    url.searchParams.set('utm_source', 'directory');
    url.searchParams.set('utm_medium', 'popup');
    url.searchParams.set('utm_campaign', slug);

    document.getElementById("popupFormFrame").src = url.toString();
    document.getElementById("customOptinBackdrop").style.display = "block";
    document.getElementById("customOptinForm").style.display = "block";
    document.body.style.overflow = "hidden";
    document.addEventListener('keydown', handleEscapeKey);
  }

  function closeOptinPopup() {
    document.getElementById("customOptinBackdrop").style.display = "none";
    document.getElementById("customOptinForm").style.display = "none";
    document.body.style.overflow = "auto";
    document.removeEventListener('keydown', handleEscapeKey);
    setTimeout(() => {
      document.getElementById("popupFormFrame").src = "";
    }, 300);
  }

  function handleEscapeKey(event) {
    if (event.key === 'Escape') closeOptinPopup();
  }

  function insertAccessButton() {
    const priceContainer = document.querySelector(".ecomm-price-desktop-container");
    if (!priceContainer || document.querySelector(".trigger-optin-btn")) return;

    const btn = document.createElement("button");
    btn.className = "trigger-optin-btn";
    btn.textContent = "Get More Info";
    btn.onclick = openOptinPopup;

    priceContainer.parentNode.insertBefore(btn, priceContainer.nextSibling);
  }

  document.addEventListener("DOMContentLoaded", insertAccessButton);
  new MutationObserver(insertAccessButton).observe(document.body, { childList: true, subtree: true });

  window.openOptinPopup = openOptinPopup;
  window.closeOptinPopup = closeOptinPopup;
</script>
```

---

Would you like this exported as a PDF or text file for future reference?
