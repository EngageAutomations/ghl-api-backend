###############################################################################
# 0. SAFETY â€” stop everything and make core files writable
###############################################################################
pkill -f node || true
chmod u+w .replit package.json || true

###############################################################################
# 1. ENSURE SERVER BINDS TO THE PORT REPLIT INJECTS
#    â€“ patch (or create) server/index.js
###############################################################################
cat > server/index.js <<'EOS'
// ---------- Minimal dev server for Replit ----------
// 1. picks up Replitâ€™s injected PORT
// 2. serves Vite middleware (dev) or /dist (prod)
// 3. single catch-all route for React
//----------------------------------------------------
import express from "express";
import { createServer as createViteServer } from "vite";
import path from "path";
import fs from "fs";

const isProd   = process.env.NODE_ENV === "production";
const PORT     = Number(process.env.PORT) || 5000;
console.log("[DEBUG] process.env.PORT =", process.env.PORT);

const app = express();

(async () => {
  if (isProd) {
    // ---------- production: use pre-built /dist ----------
    const dist = path.resolve("dist");
    app.use(express.static(dist));
    app.get("*", (_, res) => res.sendFile(path.join(dist, "index.html")));
  } else {
    // ---------- dev: mount Vite as middleware ----------
    const vite = await createViteServer({ server: { middlewareMode: true } });
    app.use(vite.middlewares);
    app.use("*", async (req, res, next) => {
      try {
        const url  = req.originalUrl;
        const html = await vite.transformIndexHtml(
          url,
          fs.readFileSync("index.html", "utf8")
        );
        res.status(200).set({ "Content-Type": "text/html" }).end(html);
      } catch (e) { next(e); }
    });
  }

  // ---------- simple health ping ----------
  app.get("/api/health", (_req, res) =>
    res.json({ status: "healthy", timestamp: new Date(), port: PORT })
  );

  app.listen(PORT, "0.0.0.0", () =>
    console.log(`ðŸš€  Server running on :${PORT}`)
  );
})();
EOS

###############################################################################
# 2. REPLACE .replit WITH A ONE-LINE RUN COMMAND & NO [[ports]] SECTION
###############################################################################
cat > .replit <<'EOS'
run = "node server/index.js"
EOS

###############################################################################
# 3. REMOVE ANY [[ports]] BLOCKS THAT MAY STILL LIVE IN replit.toml
###############################################################################
if grep -q "\[\[ports\]\]" replit.toml 2>/dev/null; then
  sed -i '/\[\[ports\]\]/,/^$/d' replit.toml
fi

###############################################################################
# 4. (OPTIONAL) CLEAN UP default TypeScript script so it stops crashing
###############################################################################
npm pkg delete scripts.dev || true

###############################################################################
# 5. LAUNCH VIA THE *RUN* WORKFLOW â€“ Replit injects PORT here
###############################################################################
node server/index.js
