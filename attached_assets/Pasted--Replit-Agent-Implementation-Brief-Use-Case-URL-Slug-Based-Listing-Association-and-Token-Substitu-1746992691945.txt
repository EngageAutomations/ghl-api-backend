📦 Replit Agent Implementation Brief
Use Case: URL Slug–Based Listing Association and Token Substitution
🧠 Purpose
This system enables the app to detect which listing is being viewed by extracting the slug from the URL, retrieving the relevant listing data (via API), and using that data to:

Generate dynamic URLs (download, popup, external links)

Auto-fill embedded forms

Track user interactions

Insert UTM parameters

Maintain context across popups and sessions

🌐 URL Format
perl
Copy
Edit
https://yourdomain.com/product-details/product/open-frame-pc-case
open-frame-pc-case = slug

Slug corresponds to a ListingData record in the database or listing index

🔧 Modules Involved
✅ 1. listing-utils.ts
Core logic for:

Extracting the slug from the URL

Fetching listing data

Fallback-safe listing data structure

Token substitution

UTM parameter injection

Logging opt-in tracking events

📄 File: listing-utils.ts (already implemented)

✅ 2. /api/listings/:slug (Backend API)
Custom API endpoint that:

Accepts a slug as a parameter

Looks up the associated listing

Returns a ListingData object in JSON

Example:

sql
Copy
Edit
GET /api/listings/open-frame-pc-case
📐 Data Schema
ts
Copy
Edit
interface ListingData {
  id: string;
  title: string;
  slug: string;
  category?: string;
  location?: string;
  downloadUrl?: string;
  popupUrl?: string;
  embedFormUrl?: string;
}
🛠️ System Behavior
🔹 On Page Load:
Get slug from window.location.pathname

Fetch the listing data using the slug

Store or use listing context in the session

ts
Copy
Edit
const slug = getSlugFromUrl();
const listing = await fetchListing(slug);
🔹 Token Replacement
ts
Copy
Edit
replaceListingTokens("https://example.com?listing={listing_title}", listing);
Supported tokens:

{listing_id}

{listing_title}

{listing_category}

{listing_location}

{timestamp}

{slug}

🔹 Download Button Behavior
Apply token substitution to the configured download URL

Convert Google Drive links to direct download format

Track click with trackOptInInteraction('download', listing)

🔹 Popup Form Behavior
Use substituted URL as iframe source

Store listing in sessionStorage for access within popup

Pass info via query parameters as fallback

🔹 Embedded Form Behavior
Run initializeForm(formElement, listing)

Auto-fill hidden fields like listing_id, listing_title, etc.

🔹 Interaction Tracking
All listing interactions are logged via:

ts
Copy
Edit
trackOptInInteraction('button_click' | 'form_submission' | 'download', listing);
📦 Tasks for the Replit Agent
📘 Frontend
 Implement getSlugFromUrl, fetchListing, replaceListingTokens, trackOptInInteraction

 Add logic to insert resolved download/popup URLs into buttons

 Initialize form fields using initializeForm()

 Add optional UTM tracking

🛠 Backend
 Implement /api/listings/:slug route using Express or Next.js API

 Ensure listings are indexed by slug and retrievable in constant time

🧪 Testing Scenarios
Scenario	Expected Outcome
Page loads with slug	Listing is fetched and displayed
Download button clicked	Tracked, and download is triggered using dynamic link
Popup button clicked	Popup opens with listing info pre-filled
Embedded form loads	Hidden fields auto-filled with correct listing ID and title
Slug not found	getSafeListing() provides fallback, and system gracefully degrades