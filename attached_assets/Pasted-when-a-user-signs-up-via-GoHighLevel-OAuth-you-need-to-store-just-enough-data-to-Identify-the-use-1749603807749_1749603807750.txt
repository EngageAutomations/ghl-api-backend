when a user signs up via GoHighLevel OAuth, you need to store just enough data to:

Identify the user

Authenticate their API calls

Manage session and token lifecycle

Support app features (e.g., location-based directory listings)

Here’s exactly what you should store — broken into categories:

✅ Required OAuth User Info to Store in Your Database
🔐 Authentication Tokens
Field	Purpose
ghl_access_token	Used to make authenticated API calls
ghl_refresh_token	Used to get a new access_token when it expires
ghl_token_expiry	Timestamp (e.g. Date.now() + expires_in) to track expiration

💡 You should encrypt these in the DB and refresh them before expiry.

👤 User Identity & Context
Field	Purpose
ghl_user_id	Unique user ID from GoHighLevel (helps deduplicate installs)
email	Email address (if provided via GHL API)
display_name or name	Friendly display name in your UI
auth_type	Track whether user signed up via oauth vs local
is_active	Soft-delete / suspension capability

🌍 GoHighLevel Context
Field	Purpose
ghl_location_id	Required in most API requests
ghl_location_name	Optional but useful in dashboards
ghl_scopes	(Optional) Helps track what permissions they authorized

🧱 Recommended Minimal Schema (OAuth Signup)
ts
Copy
Edit
{
  id: SERIAL PRIMARY KEY,
  email: TEXT,
  display_name: TEXT,
  ghl_user_id: TEXT UNIQUE,
  ghl_access_token: TEXT,
  ghl_refresh_token: TEXT,
  ghl_token_expiry: TIMESTAMP,
  ghl_location_id: TEXT,
  ghl_location_name: TEXT,
  auth_type: 'oauth',
  is_active: BOOLEAN DEFAULT true,
  created_at: TIMESTAMP DEFAULT NOW(),
  updated_at: TIMESTAMP DEFAULT NOW()
}
🧠 Optional: Extra UX or Admin Fields
Field	Why store it
last_login_at	UX tracking
install_source	Where user came from
plan	If you're billing or gating features
timezone	Scheduling features

🔐 Storage Best Practices
✅ Encrypt access_token and refresh_token

✅ Use ghl_user_id to check if the user already exists (avoid duplicates)

✅ Store ghl_token_expiry and auto-refresh before calling APIs

❌ Don’t store token data in frontend-accessible places

✅ Example Use Case Flow
User installs app via GHL Marketplace

You receive code → exchange for tokens

You store:

ghl_user_id

access_token, refresh_token, expires_in

locationId

You log them in and show their dashboard

