# Complete GoHighLevel OAuth Marketplace System Report

*Generated: June 16, 2025*

## Introduction

This document provides a complete, developer‑oriented snapshot of the EngageAutomations GoHighLevel Marketplace application as it stands on **June 16 2025**.  It explains:

* **What exists and works today** – a dual‑domain OAuth setup with a live, valid installation and stored access token.
* **Where the gap is** – your frontend code cannot yet reach those tokens, so real GoHighLevel API calls still return placeholder data.
* **How to close that gap** – three implementation options are laid out, with a strongly‑recommended Railway API‑proxy approach, plus a phased roadmap that takes you from immediate proof‑of‑life through production hardening and future feature scale‑out.

If you are looking for the single actionable item, it is this: **add a secure proxy route in Railway that accepts a `locationId`, looks up its stored token, and forwards the request to GoHighLevel.**  The rest of the report exists to give you the architectural background, code snippets, and deployment checklists to get that done quickly and safely.

---

## System Overview

Your GoHighLevel marketplace application uses a dual‑domain OAuth architecture with Railway handling backend authentication and Replit serving the frontend interface.  The system successfully captures and stores real OAuth installations with valid access tokens.

---

## Architecture Components

### 1. Railway Backend (Production OAuth Handler)

**Domain**: `https://dir.engageautomations.com`
**Purpose**: OAuth callback processing and token storage
**Status**: Active with valid installation

#### Current Implementation

* **OAuth Endpoint**: `/oauth/callback` (handles authorization codes)
* **Installation Storage**: In‑memory `Map` storage
* **Valid Installation**: `install_1750106970265`

  * Location ID: `WAvk87RmW9rBSDJHeOpH`
  * Token Status: **Valid**
  * Scopes: Full product / collection / media permissions
  * Created: Active installation with real access token

#### Railway Backend Capabilities

```javascript
// Current endpoint structure
GET /health                    // Health check
GET /api/installations         // List all installations
GET /api/oauth/status          // OAuth status check
POST /oauth/callback           // OAuth processing
GET /api/ghl/*                 // Placeholder API proxy endpoints
```

#### Railway Backend Limitations

* API proxy endpoints return placeholder responses
* Access tokens are stored but not exposed via API
* No real GoHighLevel API integration implemented yet

---

### 2. Replit Frontend (Development Interface)

**Domain**: `https://listings.engageautomations.com` + Replit sub‑domains
**Purpose**: User interface and local development
**Technology**: React + TypeScript + Vite

#### Frontend Architecture

```
client/src/
├── components/
│   ├── CreateListingForm.tsx      // Product creation with GHL sync
│   ├── CreateCollectionForm.tsx   // Collection creation with GHL sync
│   └── DirectoryDetails.tsx       // Directory management
├── pages/
│   └── GhlApiTest.tsx             // API testing interface (/ghl-api-test)
├── context/
│   └── AuthContext.tsx            // OAuth state management
└── lib/
    └── queryClient.ts             // API request handling
```

#### GHL Integration Status

* Frontend forms integrated with automatic GoHighLevel sync
* API test interface available at `/ghl-api-test`
* OAuth installation ID detected from URL parameters
* Graceful fallback when GoHighLevel sync fails

---

### 3. GoHighLevel API Service (Local Implementation)

**File**: `server/ghl-api-service.ts`
**Status**: Fully implemented but needs real access tokens

#### Implemented Capabilities

```typescript
// Product Management
createProduct(productData, credentials)
updateProduct(productId, updates, credentials)
deleteProduct(productId, credentials)
getProducts(locationId, credentials)

// Media Management
uploadMedia(fileData, credentials)

// Connection Testing
testConnection(credentials)
```

#### API Call Structure (Working)

```javascript
// Axios format matching GoHighLevel docs
const config = {
  method: 'post',
  url: 'https://services.leadconnectorhq.com/products/',
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
    'Version': '2021-07-28',
    'Authorization': `Bearer ${accessToken}`
  },
  data: productData
};
```

---

## Current Data Flow

### OAuth Installation Flow

1. User installs app from GoHighLevel marketplace.
2. Redirected to Railway backend (`/oauth/callback`).
3. Railway exchanges authorization code for access token.
4. Installation stored with real credentials.
5. User redirected to frontend interface.

### Frontend Product Creation Flow

1. User fills `CreateListingForm` or `CreateCollectionForm`.
2. Form submits to local Replit backend (`/api/ghl/products/create`).
3. Local backend calls `ghl-api-service`.
4. Service attempts GoHighLevel API call with stored credentials.
5. Success / failure status returned to frontend.

---

## Critical Gap Analysis

### Missing Link: Access Token Bridge

*Problem*: Railway has valid access tokens but does not expose them to code that needs them.
*Impact*: Local development cannot make real GoHighLevel API calls.

### Token Access Methods Attempted

```javascript
// All returned 404 or placeholder data
'https://dir.engageautomations.com/api/oauth/token'
'https://dir.engageautomations.com/api/installations/install_1750106970265/token'
'https://dir.engageautomations.com/api/oauth/installation/install_1750106970265'
```

---

## Recommended Implementation Strategy

### Option 1 – Railway API Proxy (Recommended)

Implement real GoHighLevel API calls directly in Railway backend.

```javascript
// Railway backend enhancement
app.post('/api/ghl/products/create', async (req, res) => {
  const { installationId, productData } = req.body;
  const installation = installations.get(installationId);

  const result = await axios.post(
    'https://services.leadconnectorhq.com/products/',
    productData,
    {
      headers: {
        'Authorization': `Bearer ${installation.accessToken}`,
        'Version': '2021-07-28'
      }
    }
  );

  res.json(result.data);
});
```

**Benefits**
– Tokens stay secure in Railway.
– Frontend makes simple requests to Railway.
– Centralized API management.

### Option 2 – Secure Token Endpoint

Create protected endpoint to share tokens with authenticated requests.

```javascript
app.get('/api/oauth/token/:installationId', authenticateRequest, (req, res) => {
  const installation = installations.get(req.params.installationId);
  res.json({ accessToken: installation.accessToken });
});
```

### Option 3 – Environment Variable Bridge

Store active token as an environment variable in Replit during development.

```bash
# In Replit secrets
GHL_ACCESS_TOKEN=<real_token_from_railway>
GHL_LOCATION_ID=WAvk87RmW9rBSDJHeOpH
```

---

## Implementation Roadmap

### Phase 1 – Immediate (Choose one approach)

*Option A – Railway Proxy* (≈30 min)

1. Deploy working GoHighLevel API endpoints to Railway.
2. Update frontend to call Railway rather than local backend.
3. Test real product creation.

*Option B – Token Bridge* (≈15 min)

1. Add secure token endpoint to Railway.
2. Update local `ghl-api-service` to fetch tokens.
3. Test with real access token.

*Option C – Env Vars* (≈5 min)

1. Extract token from Railway logs.
2. Add it to Replit secrets.
3. Test immediate functionality.

### Phase 2 – Production Ready (1‑2 h)

1. Implement comprehensive error handling.
2. Add token refresh logic.
3. Create monitoring and logging.
4. Add rate limiting and security middleware.
5. Deploy full API suite (products, collections, media).

### Phase 3 – Scale Features (Ongoing)

1. Add all 50+ GoHighLevel endpoints.
2. Implement webhooks for real‑time sync.
3. Add bulk operations.
4. Create admin dashboard.

---

## Current Installation Details

```json
{
  "installationId": "install_1750106970265",
  "locationId": "WAvk87RmW9rBSDJHeOpH",
  "tokenStatus": "valid",
  "scopes": [
    "products/prices.write",
    "products/prices.readonly",
    "products/collection.readonly",
    "medias.write",
    "medias.readonly",
    "locations.readonly",
    "contacts.readonly",
    "contacts.write",
    "products/collection.write",
    "users.readonly"
  ],
  "railwayBackend": "https://dir.engageautomations.com",
  "frontendDomains": [
    "https://listings.engageautomations.com",
    "replit.app domains"
  ]
}
```

---

## Immediate Next Steps

1. **Choose implementation approach** (Railway proxy recommended).
2. **Deploy working API endpoints** (update Railway backend).
3. **Test real product creation** using your live installation.
4. **Update frontend integration** to point at the new endpoints.

---

## Files Ready for Deployment

* `deploy-working-ghl-api-to-railway.js` – complete Railway backend with real API calls.
* `create-ghl-product-axios.js` – test script using correct Axios format.
* `server/ghl-api-service.ts` – full local API implementation ready to consume real tokens.
