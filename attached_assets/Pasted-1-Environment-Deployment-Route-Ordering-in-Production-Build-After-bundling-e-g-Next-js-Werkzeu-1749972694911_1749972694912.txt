1. Environment & Deployment
Route Ordering in Production Build

After bundling (e.g. Next.js/Werkzeug/Express static-fallback), does /api/oauth/status still resolve to your JSON handler and never fall through to the front-end catch-all?

Env-Var Consistency

Are all your Railway (or other) deploys refreshed so that GHL_SCOPES and GHL_USERINFO_URL point to the new values?

Redirect URI Whitelisting

Have you re-whitelisted your exact production callback URL (including ?installation_id) in GoHighLevel’s app settings?

2. Backend Routing & API Responses
“Health Check” vs. Status

If you curl /health, is it still served by the same router? Could that conflict with your new status endpoint?

HTML vs JSON

When you hit /api/oauth/status?installation_id=… with Accept: application/json, do you consistently get a JSON payload (and never HTML) under every code path—success, 401, 403, 500?

Error Codes & Messages

Have you exercised each error mode (invalid ID, missing token, expired token, malformed DB record) and confirmed the HTTP status and JSON error shape match your spec?

3. Token Management & Refresh Logic
Force-Expire Test

Can you deliberately expire a token (e.g. set its expires_at in the past) and see the refresh code kick in and then re-invoke /v1/users/me successfully?

Refresh-Fail Behavior

If the refresh endpoint fails (e.g. wrong client secret), does your code surface a clear “token_refresh_failed” error rather than hanging or returning a 200 with gibberish?

Concurrency

What happens if two concurrent requests both see an expired token? Do they race to refresh, or could one clobber the other in your DB?

4. Frontend Flow & Session Recovery
Installation ID Propagation

In browsers, mobile WebViews, and the embedded CRM iframe, does your React code always read the installation_id from URL or localStorage and never accidentally use a stale value?

Credentials & CORS

With fetch(..., credentials: 'include'), do the cookies land correctly in all targets? Are there any console “blocked by CORS” or “cookie not sent” errors?

Error Handling UX

If the status call fails, does the UI show your custom “user_info_failed” screen (with “Try Again”) rather than a generic blank page or React error boundary?

5. End-to-End & Regression
Fresh-Install Run-through

On a brand new GoHighLevel account (zero prior installs), can you go from “Install” → callback → status → blank dashboard → create a listing → see it in GHL?

Re-Authorization

If you update the scope set (e.g. add another read permission), does the “re-authorize” flow prompt again, and does your front-end handle the redirect with a new installation_id?

Multi-User Isolation

In two separate browser profiles, can you sign in twice (or switch accounts) and still see only your own profile and listings in each session?

Other API Routes

Have you smoke-tested every other /api/ghl/* path (contacts, locations, products) to ensure your proxy change for status didn’t inadvertently break them?

6. Observability & Monitoring
Log Verification

Do your server logs clearly record:

Receipt of /api/oauth/status

Outbound /v1/users/me request + response status

Any token refresh attempts + outcomes

Alerting

Is there an alert configured for spikes in 4xx/5xx on /api/oauth/status so you’ll know if HTML responses resurface?

By running through each of these questions—and automating as many checks as possible (cURL scripts, Postman/Cypress collections, unit + integration tests)—you’ll greatly increase confidence that the user-info fix holds under every scenario. Let me know if you’d like sample test scripts or further help automating any of these!