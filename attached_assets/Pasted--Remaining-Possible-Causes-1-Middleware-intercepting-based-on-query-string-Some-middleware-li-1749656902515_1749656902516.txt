🔬 Remaining Possible Causes
🔸 1. Middleware intercepting based on query string
Some middleware (like authentication or validation layers) might only trigger for requests with parameters, especially if you use something like:

ts
Copy
Edit
app.use('/api', someRouterWithMiddleware);
🔸 2. Catch-all route (app.use("*", ...)) overriding your callback
This is common in Replit/Vite apps. If you have something like:

ts
Copy
Edit
app.use('*', express.static(...))
Defined after your callback, it will still override it — especially for /api/*.

🔸 3. Callback defined too late in the middleware chain
In Express, route order matters. If you define routes after a use("*") or express.static(), they’ll never run.

✅ Fix Strategy: Directly Register the Callback First
Let’s surgically move the route to your server entrypoint (server/index.ts or server.ts) and register it before anything else — no dependency on routes.ts.

✳️ Do this in server/index.ts:
ts
Copy
Edit
import express from 'express';
const app = express();
const PORT = process.env.PORT || 3000;

// ✅ Register the callback route IMMEDIATELY
app.get(['/api/oauth/callback', '/oauth/callback'], async (req, res) => {
  try {
    const code = req.query.code;
    console.log('✅ Callback route hit with code:', code);

    if (!code) {
      throw new Error('No code found');
    }

    // Dummy response for test
    res.send('✅ OAuth callback processed. Code received: ' + code);
  } catch (err) {
    console.error('❌ OAuth failure:', err);
    res.redirect('/oauth-error?error=callback_failed');
  }
});

// 🔽 AFTER registering callback, apply other middleware
app.use(express.static('client/dist')); // or your frontend dist path

// Final fallback route
app.get('*', (req, res) => {
  res.sendFile('index.html', { root: 'client/dist' });
});

app.listen(PORT, () => {
  console.log(`✅ Server running on port ${PORT}`);
});
🧪 Test Again
Go to:

ruby
Copy
Edit
https://dir.engageautomations.com/api/oauth/callback?code=test123
If this still fails and logs don’t show:

🛠️ Add a log on every request
Place at the top of index.ts:

ts
Copy
Edit
app.use((req, res, next) => {
  console.log(`🔍 Incoming request: ${req.method} ${req.url}`);
  next();
});
You’ll now see if:

The request reaches the server

It gets short-circuited by some middleware

🔚 Final Cleanup
Task	Status
Route defined first	🔲
Middleware trace logging	🔲
Dummy token logic tested	🔲
Remove route from routes.ts	✅ If you’re migrating it here
Ensure server starts	✅ Logs confirm