Yes, this is a useful starting point, but there are several changes needed to address the issue you're facing (form appearing at the bottom of the page). Here's a breakdown of **what‚Äôs wrong and how to fix it**:

---

### ‚úÖ **What's Working:**

* You're wrapping the description and iframe inside a `#listingEmbedFormContainer`.
* You're using strong CSS overrides with `!important` for layout control.
* You're applying a flex layout with `.directory-embed-wrapper` to attempt side-by-side placement.
* You're loading the form with metadata and adding a fade-in animation.

---

### ‚ùå **What's Not Working:**

#### 1. ‚ùó `descriptionClone` breaks layout structure

You're cloning the `#description` and inserting it into a new wrapper. But the **original layout flow** from GoHighLevel is lost, which causes the wrapper to render below the visible product details.

**Fix:** Use `insertBefore` to inject your wrapper directly into `.c-product-details` or its parent, and move the actual `#description` node instead of cloning it.

---

#### 2. ‚ùó `iframe.src` is malformed

The way you're assigning the `iframe.src` is actually embedding `<iframe>...</iframe>` tags inside a string ‚Äî which is invalid. You only need the raw `formUrl`, not the entire block.

---

#### 3. ‚ùó Form wrapper doesn't render immediately

The injected layout occurs *after* GHL's rendering, but without enough load delay or retries. Also, some GHL wrappers might reset the layout before you attach your flex structure.

---

### ‚úÖ Recommended Fix Strategy

Here‚Äôs what I‚Äôd change:

---

#### ‚úÖ JavaScript Fixes

```js
// Properly set iframe URL
const parsedForm = parseEmbedCode(FORM_EMBED_STRING); // pass embed string from wizard
iframe.src = `${parsedForm.formUrl}?listing=${encodeURIComponent(title)}&utm_source=directory`;

// Reuse original description element instead of cloning
placeholderContainer.appendChild(descriptionElement); // Move, don‚Äôt clone
```

---

#### ‚úÖ DOM Injection Strategy

Instead of inserting your wrapper at the description level, **target the `.c-product-details` container** directly:

```js
const target = document.querySelector('.c-product-details');
if (target) {
  target.appendChild(placeholderContainer);
}
```

If `.c-product-details` is missing or unreliable due to dynamic naming, fallback to:

```js
const descParent = descriptionElement.closest('div');
descParent.parentNode.insertBefore(placeholderContainer, descParent);
descParent.remove(); // only if clean
```

---

#### ‚úÖ CSS Tweaks

Make sure `.product-details-form-container` has a clear height:

```css
.product-details-form-container {
  min-height: 500px !important;
}
```

And remove extra shadow overrides unless intentional:

```css
.product-details-inline-form {
  box-shadow: none !important;
}
```

---

### üß™ Want a Ready-to-Test Version?

Let me know and I‚Äôll combine these into a single working header + footer template with proper iframe injection and positioning that is guaranteed to show next to the product content on supported layouts.
