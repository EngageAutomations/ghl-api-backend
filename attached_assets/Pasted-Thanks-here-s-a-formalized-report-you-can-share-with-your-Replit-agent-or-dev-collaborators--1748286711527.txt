Thanks ‚Äî here's a **formalized report** you can share with your Replit agent or dev collaborators:

---

## üîß **Technical Issue Report: Embedded Form Positioning in GoHighLevel**

### üìå **Issue Summary**

The embedded form is consistently rendering **at the bottom of the page** instead of appearing **alongside product content** in GoHighLevel-powered listings. This violates the intended two-column desktop layout.

---

### üß† **Root Cause Analysis**

| Observation                             | Likely Cause                                               |
| --------------------------------------- | ---------------------------------------------------------- |
| **Form always appears below content**   | JS executes before layout fully stabilizes or anchors fail |
| **Targeted `.c-product-details` fails** | GoHighLevel uses dynamic, non-persistent class names       |
| **Flex wrappers have no effect**        | GHL CSS overrides or injects layout rules post-render      |
| **Page hydration rewrites DOM**         | GoHighLevel performs asynchronous DOM patching             |

> In short: **our injected layout is either ignored, overwritten, or never reaches the correct parent element** in time.

---

### üß™ **Attempted Fixes**

| Attempt | Target                                                 | Method                                | Result                                                      |
| ------- | ------------------------------------------------------ | ------------------------------------- | ----------------------------------------------------------- |
| 1Ô∏è‚É£     | `.hl-product-detail-product-name`                      | Inject form after title               | ‚ùå Layout breaks, overlapping or misaligned                  |
| 2Ô∏è‚É£     | `.c-product-details`                                   | Wrap content + form in flex container | ‚ùå Selector not reliably found or DOM overridden             |
| 3Ô∏è‚É£     | `#description`                                         | Insert flex wrapper after description | ‚ö†Ô∏è Works visually but layout not respected                  |
| 4Ô∏è‚É£     | Dynamic class match (e.g., `.cstore-product-detail-*`) | Used `querySelector` with wildcards   | ‚ùå Too inconsistent / unreliable                             |
| 5Ô∏è‚É£     | MutationObserver + Flexbox CSS                         | Rebuild layout after load             | ‚ö†Ô∏è Form loads late, appears stacked instead of side-by-side |

---

### ‚úÖ **Confirmed Problems**

* `document.querySelector(".c-product-details")` **frequently returns null**
* Injected wrappers are **not preserved** due to rehydration
* Flex layouts **break silently** due to unscoped conflicting CSS

---

### üí° **Recommended Next Steps**

1. **New Insertion Point Strategy**

   * Inject above or *wrap* `#description` and `#description.parentNode` to simulate `.c-product-details`
   * Avoid targeting `.c-*` classnames directly (too dynamic)

2. **Structural Placeholder**

   * Insert a known `<div id="listingEmbedFormContainer">` early in page load
   * Replace it with our custom layout post-load

3. **CSS Lock-in**

   * Use `!important`, scoped IDs, or isolate all layout styles with a class like `.directory-embed-wrapper`
   * Consider inline styles to resist GoHighLevel overrides

4. **Failover Mode**

   * If flex layout fails, revert to stacked layout with clear spacing and `fadeIn` transition

---

### üß© Optional Replit Task

Create a **new layout injection utility** that:

* Waits for `#description` to render
* Wraps it and the form iframe in `.description-form-flexwrap`
* Monitors for overwrite and re-applies layout if DOM is mutated

Let me know if you‚Äôd like this turned into live code!
