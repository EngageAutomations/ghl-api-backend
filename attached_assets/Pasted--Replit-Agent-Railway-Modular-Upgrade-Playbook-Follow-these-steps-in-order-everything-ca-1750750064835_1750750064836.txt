### 📋 Replit-Agent “Railway Modular Upgrade” Playbook

*(Follow these steps in order; everything can be scripted inside one Replit task or run interactively.)*

---

#### 0. Prerequisites – one-time

| Item                      | Action                                                                                             |
| ------------------------- | -------------------------------------------------------------------------------------------------- |
| **GitHub PAT**            | Personal-access-token with `repo` + `workflow` scopes → store in Replit Secrets as `GITHUB_TOKEN`. |
| **Repo URL**              | `https://github.com/ORG/REPO.git` (replace ORG/REPO).                                              |
| **Railway link**          | Railway is already wired to the default `main` branch.                                             |
| **Prettier** / **ESLint** | Add dev-deps later; not required for first run.                                                    |

---

#### 1. Clone & branch

```bash
git clone https://$GITHUB_TOKEN@github.com/ORG/REPO.git
cd REPO
git checkout -b refactor/express-modules
```

*(the token in the URL lets the agent push without prompting)*

---

#### 2. Generate the modular structure

```
/src
  app.js
  routes/
    oauth.js
    media.js
    products.js
    legacy.js
  utils/
    install-store.js
    token-refresh.js
server.js
```

> **Implementation tip:** Read the current `index.js` into memory, locate code blocks by comment markers (e.g. “FULL OAUTH FLOW”, “LOCATION-CENTRIC ROUTES”), then write each slice to the proper file with `fs.writeFileSync`.

Minimal templates:

```js
// server.js
const createApp = require('./src/app');
const PORT = process.env.PORT || 3000;
createApp().listen(PORT, '0.0.0.0', () =>
  console.log(`GHL proxy listening on ${PORT}`));
```

```js
// src/app.js
const express = require('express');
const cors    = require('cors');
const path    = require('path');

module.exports = function createApp() {
  const app = express();
  app.use(cors());
  app.use(express.json({ limit:'50mb' }));
  app.use(express.urlencoded({ extended:true, limit:'50mb' }));
  app.use(express.static(path.join(__dirname, '..', 'public')));

  // plug routes
  app.use(require('./routes/oauth'));
  app.use('/api/ghl', require('./routes/media'));
  app.use('/api/ghl', require('./routes/products'));
  app.use('/api/ghl', require('./routes/legacy'));
  return app;
};
```

Each new route file exports an **Express Router**:

```js
// src/routes/media.js
const router  = require('express').Router();
const multer  = require('multer');
const upload  = multer({ storage: multer.memoryStorage(), limits:{ fileSize:25*1024*1024 } });
// utils
const { byLocation, ensureFresh } = require('../utils/install-store');

router.post('/locations/:locationId/media', upload.array('file', 10), async (req,res)=>{ … });
module.exports = router;
```

Shared helpers go in `utils/install-store.js` and `utils/token-refresh.js`; export:

```js
module.exports = {
  store,
  byLocation,
  ensureFresh,
  scheduleRefresh
};
```

> **Important:** Keep original logic unchanged—just move code.

---

#### 3. Replace `index.js`

*Delete* the old monolith (`git rm index.js`) and ensure `package.json` now points to `server.js` if you used `"main": "index.js"`.

```json
"main": "server.js",
"scripts": { "start": "node server.js" }
```

---

#### 4. Run local sanity tests in Replit

```bash
node -c server.js src/**/*.js         # syntax check
node server.js & sleep 2 && curl http://0.0.0.0:3000/health
kill %1
```

Expect `{"ok":true}`.

---

#### 5. Commit & push

```bash
git add .
git commit -m "refactor: split GoHighLevel proxy into modular routes"
git push -u origin refactor/express-modules
```

---

#### 6. Open PR via GitHub API (optional)

```bash
curl -s -X POST \
  -H "Authorization: token $GITHUB_TOKEN" \
  -d '{"title":"Modular Express refactor","head":"refactor/express-modules","base":"main"}' \
  https://api.github.com/repos/ORG/REPO/pulls
```

---

#### 7. Add CI syntax-check (single file)

`.github/workflows/syntax.yml`

```yaml
name: node-syntax
on: [pull_request, push]
jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - run: node -c server.js src/**/*.js
```

---

#### 8. Merge PR → Railway auto-deploy

* CI green → merge to `main` → Railway builds container.
* Logs should show
  `Config check: { CLIENT_ID: '[set]', REDIRECT: '/api/oauth/callback' }`
  followed by route registrations from each file.

---

#### 9. Post-merge cleanup

* Update README with new folder structure.
* Delete old branch after deployment confirmed.

---

### One-liner summary for the agent

> **“Create branch `refactor/express-modules`, split current `index.js` into `src/app.js`, `routes/*`, `utils/*`, add `server.js`, update package.json, lint with `node -c`, push branch, open PR, and let CI + Railway deploy.”**

Run that plan end-to-end and you’ll never hit the “truncated file” error again.
