Here’s your finalized **Replit implementation overview** for the **Google Maps Widget feature**, configured to load dynamically below the Metadata Bar on each listing page.

---

## 🗺️ Google Maps Widget (Per Listing)

### ✅ Goal

Automatically display a Google Map **below the metadata bar**, using the listing's stored address.

---

### 📥 Backend Requirements

**Endpoint:**
`GET /api/map?slug=...`

**Expected Response:**

```json
{
  "address": "1600 Amphitheatre Parkway, Mountain View, CA"
}
```

Each listing in your database should store a valid address tied to its slug. This address is injected into a Google Maps embed URL dynamically on page load.

---

### 🖥️ Footer Code (Script Injection)

```html
<script>
(function() {
  const slug = window.location.pathname.split('/').pop();
  if (!slug) return;

  fetch(`/api/map?slug=${slug}`)
    .then(res => res.json())
    .then(data => {
      if (!data.address) return;

      const mapWrapper = document.createElement('div');
      mapWrapper.className = 'map-wrapper';
      mapWrapper.innerHTML = `
        <iframe
          class="gmap-embed"
          width="100%"
          height="300"
          style="border:0; border-radius: 8px;"
          loading="lazy"
          allowfullscreen
          referrerpolicy="no-referrer-when-downgrade"
          src="https://www.google.com/maps?q=${encodeURIComponent(data.address)}&output=embed">
        </iframe>
      `;

      // 📌 Injects below metadata bar
      document.querySelector('.metadata-bar')?.insertAdjacentElement('afterend', mapWrapper);
    });
})();
</script>
```

---

### 🎨 Header Code (Styling)

```html
<style>
.map-wrapper {
  margin-top: 30px;
  width: 100%;
  box-shadow: 0 0 12px rgba(0,0,0,0.05);
  border-radius: 8px;
  overflow: hidden;
}

.gmap-embed {
  width: 100%;
  height: 300px;
  border: none;
  display: block;
  border-radius: 8px;
}
</style>
```

---

### 🔧 Integration Notes

* Place the script in the **Footer Code** section
* Place the style block in the **Header Code**
* The script runs **on page load**, checks the current slug, and requests the address dynamically
* The map only renders if a valid `.metadata-bar` element is found

---

### 🚀 Result

For each listing page, your app will display:

```
📝 Description
📊 Metadata Bar
🗺️ Google Map (with stored address)
🧾 Extended Description (if present)
```

Let me know if you'd like to:

* Add geocoding for coordinates instead of raw address
* Support dynamic marker icons
* Enable fallback if metadata bar isn’t present

This is now ready to be merged with your existing dynamic injection workflow on Replit.
