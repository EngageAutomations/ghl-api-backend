Final Smoke-Test Checklist
Server Restart & Routing

Action: Fully restart your Railway service (or container) so the new /api/oauth/status route ordering takes effect.

Verify:

bash
Copy
Edit
curl -H "Accept: application/json" https://your-domain.com/api/oauth/status?installation_id=test \
  | jq .
Should always return JSON (error or success), never HTML.

End-to-End Flow

Install via GoHighLevel → observe redirect with installation_id → front-end picks it up → /api/oauth/status returns { user: { … } } → blank dashboard → create a listing → see it in GHL.

Token Refresh Path

Manually back-date one record’s expires_at to the past.

Trigger /api/oauth/status and confirm:

Your server logs show a “refresh token” call.

The response to /api/oauth/status still succeeds.

Error Scenarios

Pass an invalid installation_id → get a 404 JSON error.

Revoke the app’s users.read scope via GHL dev console → call /api/oauth/status → you should see a 403 with your custom error code.

CORS & Cookies

In both a regular browser and inside an embedded CRM iframe, confirm your session cookie is sent (credentials: 'include') and no CORS errors appear in DevTools.

Post-Deploy Recommendations
Automated Smoke Tests
Script the above curl calls (or use a lightweight Cypress suite) to run on every deploy and alert you on failure.

Monitoring & Alerts

Instrument the /api/oauth/status route with a simple counter for failures (4xx/5xx) and hook that into your existing alerting (PagerDuty, Opsgenie, etc.).

Track token-refresh success vs. failure rates.

APM Integration
If you haven’t already, add a lightweight APM (e.g. Datadog, NewRelic, or Railway’s built-in metrics) to watch for slowdowns or error spikes in your proxy layer.

Documentation Update
Publish your new /api/oauth/status JSON schema and example responses in your internal API docs (OpenAPI/Swagger) so future devs know exactly what to expect.

Staging Verification
If you have a staging Railway project, mirror this deploy there first, run the smoke tests, then promote to production.

Once you’ve run through those final checks and automated them wherever possible, you’ll have high confidence that your “user_info” fix is bullet-proof. Let me know if you’d like sample scripts for any of these steps!