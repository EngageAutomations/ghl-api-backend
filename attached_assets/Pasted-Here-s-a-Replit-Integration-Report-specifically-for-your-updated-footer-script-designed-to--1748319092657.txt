Hereâ€™s a **Replit Integration Report** specifically for your updated **footer script**, designed to give clarity and flexibility to your Replit implementation team.

---

## âœ… Replit Integration Report: Footer Form Injection (with Config Object)

This script dynamically injects a custom form iframe beneath the `#description` element on page load. It uses a config object (`parsedEmbedData`) to support dynamic values such as `formId` and `height`.

---

### ðŸ“¦ Full Script Block (Place Before `</body>`)

```html
<script>
  function getSlugFromUrl() {
    const parts = window.location.pathname.split('/');
    return parts[parts.length - 1] || "unknown";
  }

  function injectCustomForm({ formId = '', height = 470 } = {}) {
    if (!formId || document.querySelector('.description-form-flexwrap')) return;

    const desc = document.getElementById('description');
    if (!desc) return;

    const slug = getSlugFromUrl();
    const embedUrl = `https://app.makerexpress3d.com/widget/form/${formId}?listing=${encodeURIComponent(slug)}&utm_source=directory`;

    // Build the wrapper and preserve layout
    const wrapper = document.createElement('div');
    wrapper.className = 'description-form-flexwrap';
    desc.parentNode.insertBefore(wrapper, desc);
    wrapper.appendChild(desc);

    // Build the iframe
    const iframe = document.createElement('iframe');
    iframe.className = 'inline-listing-form';
    iframe.src = embedUrl;
    iframe.style.height = `${height + 100}px`; // 100px padding if needed
    iframe.style.opacity = '0';
    iframe.style.transition = 'opacity 0.6s ease';
    iframe.style.pointerEvents = 'none';

    iframe.onload = () => {
      iframe.classList.add('visible');
      iframe.style.opacity = '1';
      iframe.style.pointerEvents = 'auto';
    };

    wrapper.appendChild(iframe);
    document.body.classList.add('form-injected');
  }

  // Example usage: dynamically injected via parser or manual config
  const parsedEmbedData = {
    formId: 'yZsYJQfelidUiq28ij5v', // â¬… Replace dynamically from parser or form UI
    height: 470                    // â¬… Optional override
  };

  document.addEventListener("DOMContentLoaded", () => injectCustomForm(parsedEmbedData));
  new MutationObserver(() => injectCustomForm(parsedEmbedData)).observe(document.body, { childList: true, subtree: true });
</script>
```

---

### ðŸ”§ Customizable Parameters for Replit Devs

| Config Property   | Type   | Default             | Purpose                                                         |
| ----------------- | ------ | ------------------- | --------------------------------------------------------------- |
| `formId`          | string | `''`                | **Required**. The ID of the form to embed.                      |
| `height`          | number | `470`               | Optional. Sets the iframe height (+100px buffer is added).      |
| `listing` (param) | string | slug                | **Query param** key defaults to `"listing"` for tracking/slugs. |
| `slug` (value)    | string | last segment of URL | Auto-extracted from the current pathname.                       |

---

### ðŸ’¡ Developer Notes

* `formId` is required â€” make sure to replace it dynamically using your parser or backend integration.
* The `slug` is extracted via `getSlugFromUrl()` â€” override it if you want to pull a different ID source.
* `height + 100` ensures enough vertical room for the iframe + spacing; reduce or remove as needed.
* The `inline-listing-form` class works with the fade-in CSS youâ€™ve set in the header.
* This script **does not allow for custom query param names**. It uses `listing=` by default. If you want that configurable, you can update the line:

```js
const embedUrl = `...form/${formId}?listing=${encodeURIComponent(slug)}&utm_source=directory`;
```

to:

```js
const paramName = 'listing'; // Or dynamic
const embedUrl = `...form/${formId}?${paramName}=${encodeURIComponent(slug)}&utm_source=directory`;
```

---

### âœ… Example for Replit UI Hook-In

If youâ€™re using a UI in Replit to let users paste or configure embed data:

```js
const parsedEmbedData = {
  formId: getFormIdFromIframe(userInput),
  height: parseInt(extractHeight(userInput)) || 470
};
injectCustomForm(parsedEmbedData);
```

---

### ðŸ§  Summary

This footer script:

* Uses a config object (`parsedEmbedData`)
* Injects a responsive, fade-in iframe form
* Defaults to using the URL slug as a dynamic value
* Supports Replit UI extension via parsing or manual entry

Let me know if youâ€™d like a variant that supports multiple query params or inline error handling.
